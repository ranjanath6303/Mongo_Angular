backend

  model
     employeeModel.js


  routes
     employeeRoutes.js

-----------------------------------------------------------------
  server.js


server.jsconst express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
const employeeRoutes = require('./routes/employeeRoutes'); // Make sure this path is correct

const app = express();
const port = 3000;

// Middleware
app.use(bodyParser.json());
app.use(cors());

// Connect to MongoDB
mongoose
  .connect('mongodb://localhost:27017/mydatabase', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log('MongoDB connected'))
  .catch((err) => console.error('MongoDB connection error:', err));

// Use Routes
app.use('/api/employees', employeeRoutes);

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
---------------------------------------------------------------------
employeeModel.js

const mongoose = require('mongoose');

const EmployeeSchema = new mongoose.Schema({
  eid: { type: String, required: true },
  role: { type: String, required: true },
  salary: { type: Number, required: true },
});

module.exports = mongoose.model('Employee', EmployeeSchema);

----------------------------------------------------------------------

employeeRoutes.js

const express = require('express');
const router = express.Router();
const Employee = require('../model/employeeModel');

router.post('/', async (req, res) => {
  try {
    const newEmployee = new Employee(req.body);
    const savedEmployee = await newEmployee.save();
    res.status(201).json(savedEmployee);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

router.get('/', async (req, res) => {
  try {
    const employees = await Employee.find();
    res.status(200).json(employees);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

router.delete('/:id', async (req, res) => {
  try {
    const deletedEmployee = await Employee.findByIdAndDelete(req.params.id);
    if (!deletedEmployee) return res.status(404).json({ error: 'Employee not found' });
     res.status(200).json(deletedEmployee);
     } catch (err) {
         res.status(500).json({ error: err.message });
         }
         });
         module.exports = router;
------------------------------------------------------------------------------------------



app.component.html


<div class="container mt-5">
    <div class="card shadow-sm">
      <div class="card-header bg-primary text-white">
        <h5 class="mb-0">Add Employee</h5>
      </div>
      <div class="card-body">
        <form (submit)="addEmployee($event)">
          <div class="mb-3">
            <label for="employeeId" class="form-label">Employee ID</label>
            <input
              [(ngModel)]="employee.eid"
              name="eid"
              class="form-control"
              id="employeeId"
              placeholder="Enter Employee ID"
              required
            />
          </div>
          <div class="mb-3">
            <label for="employeeRole" class="form-label">Employee Role</label>
            <input
              [(ngModel)]="employee.role"
              name="role"
              class="form-control"
              id="employeeRole"
              placeholder="Enter Employee Role"
              required
            />
          </div>
          <div class="mb-3">
            <label for="employeeSalary" class="form-label">Employee Salary</label>
            <input
              [(ngModel)]="employee.salary"
              name="salary"
              class="form-control"
              id="employeeSalary"
              placeholder="Enter Employee Salary"
              required
            />
          </div>
          <button type="submit" class="btn btn-success">Add Employee</button>
        </form>
      </div>
    </div>
  
    <div class="mt-5">
      <h4>Employee Information</h4>
      <button class="btn btn-secondary mb-3" (click)="fetchData()">Fetch Data</button>
      <div class="table-responsive">
        <table class="table table-striped table-bordered">
          <thead class="table-dark">
            <tr>
              <th scope="col">Employee ID</th>
              <th scope="col">Employee Role</th>
              <th scope="col">Employee Salary</th>
              <th scope="col">Actions</th>
            </tr>
          </thead>
          <tbody>
            <tr *ngFor="let item of data">
              <td>{{ item.eid }}</td>
              <td>{{ item.role }}</td>
              <td>{{ item.salary }}</td>
              <td>
                <button class="btn btn-danger" (click)="deleteEmployee(item._id)">Delete</button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
  
------------------------------------------
app.component.scss


/* General container settings */
.container {
    max-width: 100%;
    padding: 20px;
    margin: 0 auto;
    box-sizing: border-box;
}

/* Card styling for form */
.card {
    background-color: #f8f9fa;
    border-radius: 10px;
    border: none;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.card-header {
    background-color: #007bff;
    color: white;
    font-weight: bold;
    text-align: center;
    border-bottom: none;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    padding: 15px 0;
}

.card-body {
    padding: 30px;
}

.form-label {
    font-weight: bold;
    margin-bottom: 8px;
}

.form-control,
.form-select {
    width: 100%;
    border-radius: 5px;
    box-shadow: none;
    border: 1px solid #ced4da;
    padding: 10px;
}

.form-control:focus,
.form-select:focus {
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.mb-3 {
    margin-bottom: 20px;
}

.btn-success {
    width: 100%;
    background-color: #28a745;
    border: none;
    padding: 12px;
    font-size: 18px;
    font-weight: bold;
    transition: background-color 0.3s ease;
}

.btn-success:hover {
    background-color: #218838;
}

.btn-danger {
    background-color: #dc3545;
    border: none;
    padding: 8px 12px;
    font-weight: bold;
    transition: background-color 0.3s ease;
    color: white;
}

.btn-danger:hover {
    background-color: #c82333;
}

.table {
    width: 100%;
    margin-top: 30px;
    border-collapse: collapse;
}

.table th {
    background-color: #343a40;
    color: white;
    font-weight: bold;
}

.table th,
.table td {
    text-align: center;
    padding: 15px;
    vertical-align: middle;
}

.table td {
    background-color: #f8f9fa;
}

.table-striped tbody tr:nth-of-type(odd) {
    background-color: #e9ecef;
}

.table-bordered {
    border: 1px solid #dee2e6;
}

.table-bordered th,
.table-bordered td {
    border: 1px solid #dee2e6;
}

.table-responsive {
    margin-top: 20px;
}


-----------------------------------------------

app.component.ts


import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [FormsModule, CommonModule],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss'],
})
export class AppComponent implements OnInit {
  employee = { eid: '', role: '', salary: '' };
  data: any[] = [];
  apiUrl = 'http://localhost:3000/api/employees';

  ngOnInit(): void {
    this.fetchData();
  }

  fetchData(): void {
    fetch(this.apiUrl)
      .then(response => response.json())
      .then(data => {
        this.data = data;
      })
      .catch(error => console.error('Error:', error));
  }

  addEmployee(event: Event): void {
    event.preventDefault();

    const { eid, role, salary } = this.employee;

    if (eid && role && salary) {
      fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ eid, role, salary }),
      })
        .then(response => response.json())
        .then(() => {
          this.fetchData();
          this.employee = { eid: '', role: '', salary: '' };
        })
        .catch(error => console.error('Error:', error));
    } else {
      alert('Please fill in all fields.');
    }
  }

  deleteEmployee(id: string): void {
    fetch(`${this.apiUrl}/${id}`, {
      method: 'DELETE',
    })
      .then(() => this.fetchData())
      .catch(error => console.error('Error:', error));
  }
}


------------------------------------------------------------------